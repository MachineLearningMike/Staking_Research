// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity ^0.8.0;

import "../libraries/SafeMath.sol";
import "../libraries/AnalyticMath.sol";
import "../libraries/IntegralMath.sol";

import "hardhat/console.sol";

//=====================================================================================
// Simple Fixed Reward.
// rewards[user] += _rate * blocks_passed * principals[user] / totalPrincipal
//=====================================================================================

contract SimpleSharedLinearReward {
    // using SafeMath for uint;

    //==================== Constants ====================
    string private constant sForbidden = "Forbidden";
    string private constant sZeroAddress = "Zero address";
    string private constant sExceedsBalance = "Exceeds balance";

    uint8 public constant DECIMALS = 18;
    // = power(10, DECIMALS+8), <> 1**(DECIMALS+8) == 1*power(10, DECIMALS+8) as in excel.
    uint public constant INITIAL_SUPPLY = 10 ** (DECIMALS+9) / 3;
    uint public constant MAX_SUPPLY = 100 * INITIAL_SUPPLY;

    //==================== ERC20 core data ====================
    string private constant _name = "SimpleSharedLinearReward";
    string private constant _symbol = "SFRW";
    uint8 private constant _decimals = DECIMALS;
    mapping(address => mapping(address => uint)) private _allowances;
    mapping(address => uint) private principals;
    uint private totalPrincipal;

    function _safeSubtract(uint a, uint b) internal pure returns (uint delta) {
        if (a > b) {
            delta = a - b;
        } else {
            delta = 0;
        }
    }

    //========================= distrubution algoritym ======================

    // Test Stage: 
    // Share: principals[user] is used as user's share to rewards.
    // Reward: We just handle with the reward quantity numericals here, not reward itself.

    struct User {
        uint    rewardDebt;
        uint    reward;
    }

    uint alpha = 1;
    uint initBlock;
    uint lastBlock;
    uint public pendency;
    uint public accRewardPerShare12;
    mapping(address => User) users;

    // test users
    address owner; address alice; address bob; address carol;


    function getTotalState() external view returns (
        uint totalBalance, uint _latestBlock,  uint _accRewardPerShare12, uint _rewordPool, uint _totalPendingReward
    ) {
        totalBalance = totalPrincipal;
        _latestBlock = lastBlock;
        _accRewardPerShare12 = accRewardPerShare12;
        _rewordPool = pendency;
        _totalPendingReward = totalPending();
    }

    function getUserState(address user) external view returns (
        uint _share, uint _reward, uint _rewardDebt, uint _userPendingReward
    ) {
        _share = principals[user];
        _reward = users[user].reward;
        _rewardDebt = users[user].rewardDebt;
        _userPendingReward = pending(user);
    }

    function update() public {
        uint blocks = block.number - initBlock - lastBlock;
        if (blocks > 0) {
            uint reward = alpha * blocks;
            pendency += reward;
            accRewardPerShare12 += reward * 1e12 / totalPrincipal;
            lastBlock = block.number - initBlock;
        }
    }

    function changePrincipal(address user, uint amount, bool CreditNotDebit) internal {
        update();
        uint standardPending = accRewardPerShare12 * principals[user] / 1e12 - users[user].rewardDebt;
        pendency -= standardPending;
        users[user].reward += standardPending;
        if (CreditNotDebit) {
            principals[user] += amount;
            totalPrincipal += amount;
        } else {
            principals[user] -= amount;
            totalPrincipal -= amount;            
        }
        users[user].rewardDebt = accRewardPerShare12 * principals[user] / 1e12;
    }

    function pending(address user) public view returns (uint) {
        uint standardPending = accRewardPerShare12 * principals[user] / 1e12 - users[user].rewardDebt;
        uint extraBlocks = block.number - initBlock - lastBlock;
        uint extraPending = alpha * extraBlocks * principals[user] / totalPrincipal;
        return (standardPending + extraPending);
    }

    function totalPending() public view returns (uint) {
        uint extraBlocks = block.number - initBlock - lastBlock;
        uint extraPending = alpha * extraBlocks;
        return extraPending;
    }
    

    function checkForConsistency() public view 
    returns(uint collective, uint marginal, uint abs_error, uint rel_error, uint solidityTruth, uint blockNo) {

        collective = totalPending();

        // marginal += pending(owner);
        // marginal += pending(alice);
        // marginal += pending(bob);
        // marginal += pending(carol);

        // collective = totalReward + totalPending();

        marginal += users[owner].reward;
        marginal += users[alice].reward;
        marginal += users[bob].reward;
        marginal += users[carol].reward;
        marginal += totalPending();

        uint max;
        if (collective < marginal) {
            abs_error = marginal - collective;
            max = marginal;

        } else {
            abs_error = collective - marginal;
            max = collective;
            if (collective > marginal) {
            } else {
            }
        }

        if (max > 0) {
            rel_error = 1e27 * abs_error/marginal;
        }

        uint blocks = block.number - initBlock;
        // (uint p, uint q) = analyticMath.pow(scale - rate, scale, blocks, cycle);
        // solidityTruth = IntegralMath.mulDivC(INITIAL_SUPPLY, rate * blocks, scale * cycle);
        blockNo = block.number;
    }

    //====================== Pulse internal functions ============================


    AnalyticMath analyticMath;

    constructor(address _analyticMath) {
        analyticMath = AnalyticMath(_analyticMath);

        //------------ distribution algorithm -----------
        initBlock = block.number;

        // These addresses are generated by hardhat, with ethereum charged.
        alice = 0x70997970C51812dc3A010C7d01b50e0d17dc79C8;
        bob = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;
        carol = 0x90F79bf6EB2c4f870365E785982E1f101E93b906;

        //-----------------------------------------------
        owner = msg.sender;
        _mint(owner, INITIAL_SUPPLY);
   }

//     //==================== ERC20 internal functions ====================

    function _totalNetBalance() internal view returns (uint) {
        return totalPrincipal;
    }

    function _netBalance(address account) internal view returns (uint balance) {
        return principals[account];
    }

    function _beforeTokenTransfer(address from, address to, uint amount) internal virtual {}

    function _afterTokenTransfer(address from, address to, uint amount) internal virtual {}

    function _mint(address to, uint amount) internal virtual {
        require(to != address(0), sZeroAddress);
        _beforeTokenTransfer(address(0), to, amount);
        changePrincipal(to, amount, true);
        _afterTokenTransfer(address(0), to, amount);

        // emit Transfer(address(0), to, amount);
    }

    function _burn(address from, uint amount) internal virtual {
        require(from != address(0), sZeroAddress);
        uint accountBalance = _netBalance(from);
        require(accountBalance >= amount, sExceedsBalance);
        _beforeTokenTransfer(from, address(0), amount);
        changePrincipal(from, amount, false);    // false for debit
        _afterTokenTransfer(from, address(0), amount);
        
        // emit Transfer(from, address(0), amount);
    }

    function _transfer(
        address sender,
        address recipient,
        uint amount
    ) internal virtual {
        require(sender != address(0), sZeroAddress);
        require(recipient != address(0), sZeroAddress);
        uint senderBalance = _netBalance(sender);
        require(senderBalance >= amount, sExceedsBalance);
        _beforeTokenTransfer(sender, recipient, amount);
        changePrincipal(sender, amount, false);  // false: debit
        changePrincipal(recipient, amount, true);    // true: credit
        _afterTokenTransfer(sender, recipient, amount);

        // emit Transfer(sender, recipient, amount);
    }

    function _approve(
        address _owner,
        address _spender,
        uint _amount
    ) internal virtual {
        require(_owner != address(0), sZeroAddress);
        require(_spender != address(0), sZeroAddress);
        _allowances[_owner][_spender] = _amount;

        // emit Approval(_owner, _spender, _amount);
    }

   function _increaseAllowance(address _owner, address _spender, uint addedValue) internal virtual returns (bool) {
        require(_owner != address(0), sZeroAddress);
        _approve(_owner, _spender, _allowances[_owner][_spender] + addedValue);
        return true;
    }

    function _decreaseAllowance(address _owner, address _spender, uint subtractedValue) public virtual returns (bool) {
        require(_owner != address(0), sZeroAddress);
        _approve(_owner, _spender, _allowances[_owner][_spender] - subtractedValue);
        return true;
    }


    //==================== ERC20 public funcitons ====================

    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    function totalBalance() public view virtual returns (uint) {
        return _totalNetBalance();
    }

    function balance(address account) public view virtual returns (uint) {
        return _netBalance(account); // not less than its true value
    }

    function mint(address to, uint amount) public {
        require(_totalNetBalance() + amount <= MAX_SUPPLY, "Exceed Max Supply");
        _mint(to, amount);
    }

    function burn(address from, uint amount) public {
        _burn(from, amount);
    }

    function transfer(address recipient, uint amount) public virtual returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint amount
    ) public virtual returns (bool) {
        if (sender != msg.sender) {
            uint currentAllowance = _allowances[sender][msg.sender];
            require(currentAllowance >= amount, "Transfer exceeds allowance");
        }
        _transfer(sender, recipient, amount); // No guarentee it doesn't make a change to _allowances. Revert if it fails.

        return true;
    }

    function allowance(address _owner, address _spender) public view virtual returns (uint) {
        return _allowances[_owner][_spender];
    }

    function approve(address spender, uint amount) public virtual returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function increaseAllowance(address spender, uint addedValue) public virtual returns (bool) {
        return _increaseAllowance(msg.sender, spender, addedValue);
    }

    function decreaseAllowance(address spender, uint subtractedValue) public virtual returns (bool) {
        return _decreaseAllowance(msg.sender, spender, subtractedValue);
    }

//     //==================== Pulse public functions ====================
}
