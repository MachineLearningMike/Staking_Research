\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\abx@aux@refcontext{none/global//global/global}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces Classification of algorithms}}{2}{table.caption.1}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{tbl:PendencyAndActivity}{{1}{2}{Classification of algorithms}{table.caption.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Methodology}{3}{section.2}\protected@file@percent }
\newlabel{sec:Methodology}{{2}{3}{Methodology}{section.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Tasks}{3}{subsection.2.1}\protected@file@percent }
\newlabel{sec:Tasks}{{2.1}{3}{Tasks}{subsection.2.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces In a simple task, $reward(user)$ for any user $user$, as well as $\DOTSB \sum@ \slimits@ _{u \in U}reward(u)$, grows linearly over time, because simple tasks only collect rewards that grow linearly over time and the collected rewards have their own account different from the principal account. }}{3}{figure.caption.2}\protected@file@percent }
\newlabel{fig:free_sim_individual_rewards}{{1}{3}{In a simple task, $reward(user)$ for any user $user$, as well as $\sum _{u \in U}reward(u)$, grows linearly over time, because simple tasks only collect rewards that grow linearly over time and the collected rewards have their own account different from the principal account}{figure.caption.2}{}}
\newlabel{sec:SimpleInterest}{{2.1}{3}{Tasks}{figure.caption.2}{}}
\newlabel{eq:SimpleInterest}{{1}{3}{Tasks}{equation.2.1}{}}
\newlabel{sec:SimpleBurn}{{2.1}{4}{Tasks}{equation.2.1}{}}
\newlabel{eq:SimpleBurn}{{2}{4}{Tasks}{equation.2.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces In a compound task, $balance(user)$ for any user $user$, which is $user$'s $principal$ plus/minus $user$'s interest/burn, as well as $\DOTSB \sum@ \slimits@ _{u \in U}balance(u)$, grows/shrinks exponentially from its initial value, because compound tasks only collect interest/burn that is exponential over time and the collected interest/burn is credited to/debited from the principal account. }}{4}{figure.caption.3}\protected@file@percent }
\newlabel{fig:free_com_individual_principals}{{2}{4}{In a compound task, $balance(user)$ for any user $user$, which is $user$'s $principal$ plus/minus $user$'s interest/burn, as well as $\sum _{u \in U}balance(u)$, grows/shrinks exponentially from its initial value, because compound tasks only collect interest/burn that is exponential over time and the collected interest/burn is credited to/debited from the principal account}{figure.caption.3}{}}
\newlabel{sec:CompoundInterest}{{2.1}{4}{Tasks}{figure.caption.3}{}}
\newlabel{eq:CompoundInterest}{{3}{4}{Tasks}{equation.2.3}{}}
\newlabel{sec:CompoundBurn}{{2.1}{4}{Tasks}{equation.2.3}{}}
\newlabel{eq:CompoundBurn}{{4}{4}{Tasks}{equation.2.4}{}}
\newlabel{sec:SimpleSharedPrize}{{2.1}{5}{Tasks}{equation.2.4}{}}
\newlabel{eq:SimpleSharedPrize}{{5}{5}{Tasks}{equation.2.5}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Position}{5}{subsection.2.2}\protected@file@percent }
\newlabel{sec:Position}{{2.2}{5}{Position}{subsection.2.2}{}}
\newlabel{sec:SimpleInterestExponential}{{2.2}{5}{Position}{subsection.2.2}{}}
\newlabel{eq:SimpleInterestExponential}{{6}{5}{Position}{equation.2.6}{}}
\newlabel{sec:SimpleBurnExponential}{{2.2}{5}{Position}{equation.2.6}{}}
\newlabel{eq:SimpleBurnExponential}{{7}{5}{Position}{equation.2.7}{}}
\newlabel{sec:CompoundleInterestLinear}{{2.2}{5}{Position}{equation.2.7}{}}
\newlabel{eq:CompoundleInterestLinear}{{8}{5}{Position}{equation.2.8}{}}
\newlabel{sec:CompoundBurnLinear}{{2.2}{6}{Position}{equation.2.8}{}}
\newlabel{eq:SimpCompoundBurnLinearleInterest}{{9}{6}{Position}{equation.2.9}{}}
\newlabel{lst:parasitic}{{2.2}{7}{Position}{equation.2.9}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {1}{\ignorespaces Example of $changePrincipal(user, amount)$ function parasitic on transactions. The $changePrincipal(user)$ function in our algorithms acts as the compounding action that gets parasitic on users' transactions and precedes the transactions' intended actions. This function collects all pending rewards of the user and adds it to their destination account. \textit  {Furthermore}, the function takes over principal-chaining actions from the transactions, as compounding actions and principal-changing actions have high cohesion and should be in the same module, from the software engineering point of view. }}{7}{lstlisting.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Consistency criteria}{8}{subsection.2.3}\protected@file@percent }
\newlabel{sec:Criteria}{{2.3}{8}{Consistency criteria}{subsection.2.3}{}}
\newlabel{eq:TrueTotal}{{10}{9}{Consistency criteria}{equation.2.10}{}}
\newlabel{eq:AbsoluteErrorA}{{11}{9}{Consistency criteria}{equation.2.11}{}}
\newlabel{eq:AbsoluteErrorB}{{12}{9}{Consistency criteria}{equation.2.12}{}}
\newlabel{eq:RelativeErrorA}{{13}{9}{Consistency criteria}{equation.2.13}{}}
\newlabel{eq:RelativeErrorB}{{14}{9}{Consistency criteria}{equation.2.14}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Algorithms}{10}{section.3}\protected@file@percent }
\newlabel{sec:Algorithms}{{3}{10}{Algorithms}{section.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Simple Interest pendency tracker algorithm}{10}{subsection.3.1}\protected@file@percent }
\newlabel{sec:SimpleInterestPendency}{{3.1}{10}{Simple Interest pendency tracker algorithm}{subsection.3.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces The UML State Machine of Simple Interest pendency tracker algorithm. The four functions corresponding to queries in the Consistency Criteria, as well as the $changePrincipal(user,amount)$ function, are represented as events of the state machine. When invoked, these events are supposed to let the state machine transition from the \textit  {consistent state} back to the same \textit  {consistent state}. }}{10}{figure.caption.4}\protected@file@percent }
\newlabel{fig:SimpleInterestPendency}{{3}{10}{The UML State Machine of Simple Interest pendency tracker algorithm. The four functions corresponding to queries in the Consistency Criteria, as well as the $changePrincipal(user,amount)$ function, are represented as events of the state machine. When invoked, these events are supposed to let the state machine transition from the \textit {consistent state} back to the same \textit {consistent state}}{figure.caption.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Simple Burn pendency tracker algorithm}{11}{subsection.3.2}\protected@file@percent }
\newlabel{sec:SimpleBurnPendency}{{3.2}{11}{Simple Burn pendency tracker algorithm}{subsection.3.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces The UML State Machine of Simple Burn pendency tracker algorithm. }}{11}{figure.caption.5}\protected@file@percent }
\newlabel{fig:SimpleBurnPendency}{{4}{11}{The UML State Machine of Simple Burn pendency tracker algorithm}{figure.caption.5}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}Compound Interest pendency tracker algorithm}{12}{subsection.3.3}\protected@file@percent }
\newlabel{sec:CompoundInterestPendency}{{3.3}{12}{Compound Interest pendency tracker algorithm}{subsection.3.3}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces The UML State Machine of Compound Interest pendency tracker algorithm. }}{12}{figure.caption.6}\protected@file@percent }
\newlabel{fig:CompoundInterestPendency}{{5}{12}{The UML State Machine of Compound Interest pendency tracker algorithm}{figure.caption.6}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}Compound Burn pendency tracker algorithm}{12}{subsection.3.4}\protected@file@percent }
\newlabel{sec:CompoundBurnPendency}{{3.4}{12}{Compound Burn pendency tracker algorithm}{subsection.3.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces The UML State Machine of Compound Burn pendency tracker algorithm.}}{12}{figure.caption.7}\protected@file@percent }
\newlabel{fig:CompoundBurnPendency}{{6}{12}{The UML State Machine of Compound Burn pendency tracker algorithm}{figure.caption.7}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.5}Simple Interest activity tracker algorithm}{13}{subsection.3.5}\protected@file@percent }
\newlabel{sec:SimpleInterestActivity}{{3.5}{13}{Simple Interest activity tracker algorithm}{subsection.3.5}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces The UML State Machine of Simple Interest activity tracker algorithm.}}{13}{figure.caption.8}\protected@file@percent }
\newlabel{fig:SimpleInterestActivity}{{7}{13}{The UML State Machine of Simple Interest activity tracker algorithm}{figure.caption.8}{}}
\newlabel{sec:Pendency_vs_Activity}{{3.5}{13}{Simple Interest activity tracker algorithm}{figure.caption.8}{}}
\newlabel{sec:AlgorithmCorrectness}{{3.5}{14}{Simple Interest activity tracker algorithm}{figure.caption.8}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.6}Simple Burn activity tracker algorithm}{17}{subsection.3.6}\protected@file@percent }
\newlabel{sec:SimpleBurnActivity}{{3.6}{17}{Simple Burn activity tracker algorithm}{subsection.3.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces The UML State Machine of Simple Burn activity tracker algorithm.}}{17}{figure.caption.9}\protected@file@percent }
\newlabel{fig:SimpleBurnActivity}{{8}{17}{The UML State Machine of Simple Burn activity tracker algorithm}{figure.caption.9}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.7}Compound Interest activity tracker algorithm}{18}{subsection.3.7}\protected@file@percent }
\newlabel{sec:CompoundInterestActivity}{{3.7}{18}{Compound Interest activity tracker algorithm}{subsection.3.7}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces The UML State Machine of Compound Interest activity tracker algorithm.}}{18}{figure.caption.10}\protected@file@percent }
\newlabel{fig:CompoundInterestActivity}{{9}{18}{The UML State Machine of Compound Interest activity tracker algorithm}{figure.caption.10}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.8}Compound Burn activity tracker algorithm}{21}{subsection.3.8}\protected@file@percent }
\newlabel{sec:CompoundBurnActivity}{{3.8}{21}{Compound Burn activity tracker algorithm}{subsection.3.8}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces The UML State Machine of Compound Burn activity tracker algorithm.}}{21}{figure.caption.11}\protected@file@percent }
\newlabel{fig:CompoundBurnActivity}{{10}{21}{The UML State Machine of Compound Burn activity tracker algorithm}{figure.caption.11}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.9}Random algorithms}{22}{subsection.3.9}\protected@file@percent }
\newlabel{sec:RandomAlgorithms}{{3.9}{22}{Random algorithms}{subsection.3.9}{}}
\newlabel{lst:Biasing}{{2}{22}{Handling division errors in our Solidity implementation of algorithm. We identify two numerical error sources: the exponentiation error and the division error. When $rate = 0.000474$, the whole 377,000 accumulated exponentiation errors are collectively small enough if users change their principal frequently and, so, if their exponents are small. As for the division errors, we adopt a technique that alternatingly chooses between a quotient biased to a smaller value and a quotient biased to a larger value, allowing the hidden division errors to cancel each other. }{lstlisting.2}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {2}{\ignorespaces Handling division errors in our Solidity implementation of algorithm. We identify two numerical error sources: the exponentiation error and the division error. When $rate = 0.000474$, the whole 377,000 accumulated exponentiation errors are collectively small enough if users change their principal frequently and, so, if their exponents are small. As for the division errors, we adopt a technique that alternatingly chooses between a quotient biased to a smaller value and a quotient biased to a larger value, allowing the hidden division errors to cancel each other. }}{22}{lstlisting.2}\protected@file@percent }
\newlabel{eq:ExponentiationError_intuision}{{15}{23}{Random algorithms}{equation.3.15}{}}
\newlabel{eq:NativeDivision}{{16}{23}{Random algorithms}{equation.3.16}{}}
\newlabel{eq:3rdPartyDivision}{{17}{23}{Random algorithms}{equation.3.17}{}}
\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces Classification of algorithms}}{24}{table.caption.12}\protected@file@percent }
\newlabel{tbl:AlgorithmsClassified}{{2}{24}{Classification of algorithms}{table.caption.12}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Tests}{24}{section.4}\protected@file@percent }
\newlabel{sec:Tests}{{4}{24}{Tests}{section.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Baseline}{24}{subsection.4.1}\protected@file@percent }
\newlabel{sec:javascriptTruth}{{4.1}{24}{Baseline}{subsection.4.1}{}}
\newlabel{eq:AccumulatedTotalBalance_Compound}{{18}{24}{Baseline}{equation.4.18}{}}
\newlabel{eq:ShortcutTotalBalance_Compound}{{19}{25}{Baseline}{equation.4.19}{}}
\newlabel{eq:AccumulatedTotalBalance_Simple}{{20}{25}{Baseline}{equation.4.20}{}}
\newlabel{eq:ShortcutTotalBalance_Simple}{{21}{25}{Baseline}{equation.4.21}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Testing Procedure}{25}{subsection.4.2}\protected@file@percent }
\newlabel{sec:TestingProcedure}{{4.2}{25}{Testing Procedure}{subsection.4.2}{}}
\newlabel{sec:TestModes}{{4.2}{26}{Testing Procedure}{subsection.4.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces For a simple task in the Free Total Principal test mode, $totalPrincipal$ keeps constantly to its initial value. }}{26}{figure.caption.13}\protected@file@percent }
\newlabel{fig:fixed_sim_pillars_mode_free}{{11}{26}{For a simple task in the Free Total Principal test mode, $totalPrincipal$ keeps constantly to its initial value}{figure.caption.13}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces For a simple task in the Free Total Principal test mode, $totalRewards$ grows freely linearly, because the time-linear interest or burn is additively accumulated to $reward[user]$. }}{26}{figure.caption.14}\protected@file@percent }
\newlabel{fig:fixed_sim_pillars_mode_free}{{12}{26}{For a simple task in the Free Total Principal test mode, $totalRewards$ grows freely linearly, because the time-linear interest or burn is additively accumulated to $reward[user]$}{figure.caption.14}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {13}{\ignorespaces $totalBalance()$ for compound tasks in Free Total Principal test mode grows/shrinks freely exponentially from its initial total principal as much as time goes and $rate$ allows, because the time-exponential interest/burn \textit  {is} compounded to/from $principals[user]$. }}{26}{figure.caption.15}\protected@file@percent }
\newlabel{fig:free_com_total_mode}{{13}{26}{$totalBalance()$ for compound tasks in Free Total Principal test mode grows/shrinks freely exponentially from its initial total principal as much as time goes and $rate$ allows, because the time-exponential interest/burn \textit {is} compounded to/from $principals[user]$}{figure.caption.15}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {14}{\ignorespaces For a simple task in the Fixed Total Principal test mode, $totalPrincipal$ keeps constant to its initial value. While the testing program tries to keep $totalPrincipal$ fixed (with $mint$ or $burn$ transactions from offchain), every $principals[user]$, so $totalPrincipal$ too, is already fixed, because the (linear) interest or burn is \textit  {not} compounded to $principals[user]$. }}{27}{figure.caption.16}\protected@file@percent }
\newlabel{fig:fixed_sim_pillars_mode_fixed}{{14}{27}{For a simple task in the Fixed Total Principal test mode, $totalPrincipal$ keeps constant to its initial value. While the testing program tries to keep $totalPrincipal$ fixed (with $mint$ or $burn$ transactions from offchain), every $principals[user]$, so $totalPrincipal$ too, is already fixed, because the (linear) interest or burn is \textit {not} compounded to $principals[user]$}{figure.caption.16}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {15}{\ignorespaces For a simple task in the Fixed Total Principal test mode, $totalRewards$ grows freely linearly, because the linear interest or burn is additively accumulated to $reward[user]$. }}{27}{figure.caption.17}\protected@file@percent }
\newlabel{fig:fixed_sim_pillars_mode_fixed}{{15}{27}{For a simple task in the Fixed Total Principal test mode, $totalRewards$ grows freely linearly, because the linear interest or burn is additively accumulated to $reward[user]$}{figure.caption.17}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {16}{\ignorespaces For compound tasks in the Fixed Total Principal test mode, $totalBalance$ is regulated by the testing program with $mint$ or $burn$ transactions, so that $totalBalance$ reverts to its initial value frequently. }}{27}{figure.caption.18}\protected@file@percent }
\newlabel{fig:fixed_com_total_mode}{{16}{27}{For compound tasks in the Fixed Total Principal test mode, $totalBalance$ is regulated by the testing program with $mint$ or $burn$ transactions, so that $totalBalance$ reverts to its initial value frequently}{figure.caption.18}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {17}{\ignorespaces For compound tasks in the Fixed Total Principal test mode, the testing program regulates $totalBalance$, which would otherwise grow/shrink freely as in Figure~\ref {fig:free_com_total_mode}, by pulling it down/up to its initial value intermittently. }}{27}{figure.caption.19}\protected@file@percent }
\newlabel{fig:fixed_com_total_start_mode}{{17}{27}{For compound tasks in the Fixed Total Principal test mode, the testing program regulates $totalBalance$, which would otherwise grow/shrink freely as in Figure~\ref {fig:free_com_total_mode}, by pulling it down/up to its initial value intermittently}{figure.caption.19}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}Test cases}{27}{subsection.4.3}\protected@file@percent }
\newlabel{sec:TestCases}{{4.3}{27}{Test cases}{subsection.4.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4}Test case: Simple Tasks in Free Total Principal mode}{28}{subsection.4.4}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {18}{\ignorespaces Relative Errors A and B in simple tasks in Free Total Principal test mode. The Relative Errors converge and are less than $10^{-22}$ during 128 simulated years and 180,000 transfer transactions. }}{28}{figure.caption.20}\protected@file@percent }
\newlabel{fig:free_sim_absolute_case}{{18}{28}{Relative Errors A and B in simple tasks in Free Total Principal test mode. The Relative Errors converge and are less than $10^{-22}$ during 128 simulated years and 180,000 transfer transactions}{figure.caption.20}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {19}{\ignorespaces Relative Errors A and B, after a long run, for simple tasks in Free Total Principal test mode. For pendency trackers, $totalBalance$ and $\DOTSB \sum@ \slimits@ _{u \in U}balance(u)$ reveal significant deviation from their shared substitute true value $javascriptTruth$. For activity trackers, the two values are fluctuating. }}{28}{figure.caption.21}\protected@file@percent }
\newlabel{fig:free_sim_relative_end_case}{{19}{28}{Relative Errors A and B, after a long run, for simple tasks in Free Total Principal test mode. For pendency trackers, $totalBalance$ and $\sum _{u \in U}balance(u)$ reveal significant deviation from their shared substitute true value $javascriptTruth$. For activity trackers, the two values are fluctuating}{figure.caption.21}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.5}Test case: Compound Tasks in Free Total Principal mode}{29}{subsection.4.5}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {20}{\ignorespaces Relative Errors A and B for compound tasks in Free Total Principal test mode. The Relative Errors grow linearly over time and are less than $10^{-11}$ during 128 simulated years and 180,000 transfer transactions. }}{29}{figure.caption.22}\protected@file@percent }
\newlabel{fig:free_com_relative_case}{{20}{29}{Relative Errors A and B for compound tasks in Free Total Principal test mode. The Relative Errors grow linearly over time and are less than $10^{-11}$ during 128 simulated years and 180,000 transfer transactions}{figure.caption.22}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {21}{\ignorespaces Absolute Consistency Errors for compound tasks in Free Total Principal test mode. They have exponential growth as suggested by the linearity of Relative Errors A and B. }}{29}{figure.caption.23}\protected@file@percent }
\newlabel{fig:free_com_absolute_case}{{21}{29}{Absolute Consistency Errors for compound tasks in Free Total Principal test mode. They have exponential growth as suggested by the linearity of Relative Errors A and B}{figure.caption.23}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {22}{\ignorespaces Relative Errors A and B, during the starting period, for compound tasks in Free Total Principal test mode. The two Relative Errors are not distinguishable from each other on this small-resolution plot. }}{29}{figure.caption.24}\protected@file@percent }
\newlabel{fig:free_com_relative_start_case}{{22}{29}{Relative Errors A and B, during the starting period, for compound tasks in Free Total Principal test mode. The two Relative Errors are not distinguishable from each other on this small-resolution plot}{figure.caption.24}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {23}{\ignorespaces Relative Errors A and B, after a long run, for compound tasks in Free Total Principal test mode. The two Relative Errors are barely distinguishable from each other for burn tasks. }}{29}{figure.caption.25}\protected@file@percent }
\newlabel{fig:free_4_pillars}{{23}{29}{Relative Errors A and B, after a long run, for compound tasks in Free Total Principal test mode. The two Relative Errors are barely distinguishable from each other for burn tasks}{figure.caption.25}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.6}Test case: Simple Tasks in Fixed Total Principal mode}{30}{subsection.4.6}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {24}{\ignorespaces Relative Errors A and B for simple tasks in Fixed Total Principal test mode. }}{30}{figure.caption.26}\protected@file@percent }
\newlabel{fig:fixed_sim_relative_case}{{24}{30}{Relative Errors A and B for simple tasks in Fixed Total Principal test mode}{figure.caption.26}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {25}{\ignorespaces Absolute Consistency Errors for simple tasks in Fixed Total Principal test mode. Activity tracker algorithms show little, if not no, absolute errors. }}{30}{figure.caption.27}\protected@file@percent }
\newlabel{fig:fixed_sim_absolute_case}{{25}{30}{Absolute Consistency Errors for simple tasks in Fixed Total Principal test mode. Activity tracker algorithms show little, if not no, absolute errors}{figure.caption.27}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {26}{\ignorespaces Relative Errors A and B, during the starting period, for simple tasks in Fixed Total Principal test mode. }}{30}{figure.caption.28}\protected@file@percent }
\newlabel{fig:fixed_sim_relative_start_case}{{26}{30}{Relative Errors A and B, during the starting period, for simple tasks in Fixed Total Principal test mode}{figure.caption.28}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.7}Test case: Compound Tasks in Fixed Total Principal mode}{30}{subsection.4.7}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {27}{\ignorespaces Relative Errors A and B for compound tasks in Fixed Total Principal test mode. While Relative Errors are not growing and lower than $10^{-12}$ in burn tasks, they are diverging and as high as $0.002$, after a 128-year-long simulated run. }}{30}{figure.caption.29}\protected@file@percent }
\newlabel{fig:fixed_com_relative_case}{{27}{30}{Relative Errors A and B for compound tasks in Fixed Total Principal test mode. While Relative Errors are not growing and lower than $10^{-12}$ in burn tasks, they are diverging and as high as $0.002$, after a 128-year-long simulated run}{figure.caption.29}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {28}{\ignorespaces Relative Errors A and B for compound tasks in Fixed Total Principal test mode. }}{31}{figure.caption.30}\protected@file@percent }
\newlabel{fig:fixed_com_relative_case_mid}{{28}{31}{Relative Errors A and B for compound tasks in Fixed Total Principal test mode}{figure.caption.30}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {29}{\ignorespaces Absolute Consistency Errors for compound tasks in Fixed Total Principal test mode. }}{31}{figure.caption.31}\protected@file@percent }
\newlabel{fig:fixed_com_absolute_case}{{29}{31}{Absolute Consistency Errors for compound tasks in Fixed Total Principal test mode}{figure.caption.31}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {30}{\ignorespaces Log Absolute Consistency Errors for compound tasks in Fixed Total Principal test mode. The straight log lines on the left of the chart confirms that the exponentiation errors are time-exponential. }}{31}{figure.caption.32}\protected@file@percent }
\newlabel{fig:fixed_com_absolute_log_case}{{30}{31}{Log Absolute Consistency Errors for compound tasks in Fixed Total Principal test mode. The straight log lines on the left of the chart confirms that the exponentiation errors are time-exponential}{figure.caption.32}{}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Conclusion}{31}{section.5}\protected@file@percent }
\newlabel{sec:Conclusion}{{5}{31}{Conclusion}{section.5}{}}
\abx@aux@nociteall
\@writefile{lot}{\contentsline {table}{\numberline {3}{\ignorespaces Relative Errors A and B in our test scenario. }}{32}{table.caption.33}\protected@file@percent }
\newlabel{tbl:RelativeErrors}{{3}{32}{Relative Errors A and B in our test scenario}{table.caption.33}{}}
\newlabel{Acknowledgments}{{5}{32}{Acknowledgments}{section*.34}{}}
\abx@aux@read@bbl@mdfivesum{59071B85045FDF76198E9845F8701D7C}
\abx@aux@defaultrefcontext{0}{satoshi}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{pancakeswap}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{solidity-math-utils}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{makarov}{none/global//global/global}
\gdef \@abspage@last{32}
